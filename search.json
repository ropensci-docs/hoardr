[{"path":"https://docs.ropensci.org/hoardr/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/hoardr/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/hoardr/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/hoardr.git Make sure track progress upstream (.e., version hoardr ropensci/hoardr) git remote add upstream https://github.com/ropensci/hoardr.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request home base ropensci/hoardr","code":""},{"path":[]},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"hoardr-introduction","dir":"Articles","previous_headings":"","what":"hoardr introduction","title":"Introduction to the hoardr package","text":"hoardr package managing cached files. benefit using hoardr vs. raw rapddirs hoardr exposes easy use R6 class variables functions within , don’t import function foo bar, etc. Just single object. can easily wrap hoardr user facing functions package manage cached files. find bugs feature requests get touch https://github.com/ropensci/hoardr.","code":""},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"install","dir":"Articles","previous_headings":"hoardr introduction","what":"Install","title":"Introduction to the hoardr package","text":"Stable CRAN Dev version","code":"install.packages(\"hoardr\") devtools::install_github(c(\"ropensci/hoardr\")) library(\"hoardr\")"},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"initialize-client","dir":"Articles","previous_headings":"hoardr introduction","what":"initialize client","title":"Introduction to the hoardr package","text":"","code":"(x <- hoardr::hoard()) #> <hoard>  #>   path:  #>   cache path:"},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"set-cache-path","dir":"Articles","previous_headings":"hoardr introduction","what":"set cache path","title":"Introduction to the hoardr package","text":"","code":"x$cache_path_set(\"foobar\", type = 'tempdir') #> [1] \"/tmp/RtmplGZdG2/R/foobar\""},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"make-the-directory-if-doesnt-exist","dir":"Articles","previous_headings":"hoardr introduction","what":"make the directory if doesn’t exist","title":"Introduction to the hoardr package","text":"","code":"x$mkdir()"},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"put-a-file-in-the-cache","dir":"Articles","previous_headings":"hoardr introduction","what":"put a file in the cache","title":"Introduction to the hoardr package","text":"","code":"cat(\"hello world\", file = file.path(x$cache_path_get(), \"foo.txt\"))"},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"list-the-files","dir":"Articles","previous_headings":"hoardr introduction","what":"list the files","title":"Introduction to the hoardr package","text":"","code":"x$list() #> [1] \"/tmp/RtmplGZdG2/R/foobar/foo.txt\""},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"details","dir":"Articles","previous_headings":"hoardr introduction","what":"details","title":"Introduction to the hoardr package","text":"","code":"x$details() #> <cached files> #>   directory: /tmp/RtmplGZdG2/R/foobar #>  #>   file: /foo.txt #>   size: 0 mb"},{"path":"https://docs.ropensci.org/hoardr/articles/hoardr_vignette.html","id":"delete-by-file-name","dir":"Articles","previous_headings":"hoardr introduction","what":"delete by file name","title":"Introduction to the hoardr package","text":"","code":"x$delete(\"foo.txt\") x$list() #> character(0)"},{"path":"https://docs.ropensci.org/hoardr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author. Tamás Stirling. Contributor, maintainer.","code":""},{"path":"https://docs.ropensci.org/hoardr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S (2024). hoardr: Manage Cached Files. R package version 0.5.4, https://github.com/ropensci/hoardr, https://docs.ropensci.org/hoardr/.","code":"@Manual{,   title = {hoardr: Manage Cached Files},   author = {Scott Chamberlain},   year = {2024},   note = {R package version 0.5.4, https://github.com/ropensci/hoardr},   url = {https://docs.ropensci.org/hoardr/}, }"},{"path":"https://docs.ropensci.org/hoardr/index.html","id":"hoardr","dir":"","previous_headings":"","what":"Manage Cached Files","title":"Manage Cached Files","text":"hoard - manage cached files Exposes single R6 object package imported another package managing cached files, don’t need pollute NAMESPACE bunch functions. (can always just hoardr::fxn, single object benefits well [maintaining state, e.g.]).","code":""},{"path":"https://docs.ropensci.org/hoardr/index.html","id":"install","dir":"","previous_headings":"","what":"install","title":"Manage Cached Files","text":"stable dev version","code":"install.packages(\"hoardr\") remotes::install_github(\"ropensci/hoardr\") library(hoardr)"},{"path":"https://docs.ropensci.org/hoardr/index.html","id":"usage","dir":"","previous_headings":"","what":"usage","title":"Manage Cached Files","text":"initialize client set cache path make directory doesn’t exist put file cache list files details delete file name","code":"(x <- hoardr::hoard()) #> <hoard>  #>   path:  #>   cache path: x$cache_path_set(\"foobar\", type = 'tempdir') #> [1] \"/tmp/Rtmp4oqK58/R/foobar\" x$mkdir() cat(\"hello world\", file = file.path(x$cache_path_get(), \"foo.txt\")) x$list() #> [1] \"/tmp/Rtmp4oqK58/R/foobar/foo.txt\" x$details() #> <cached files> #>   directory: /tmp/Rtmp4oqK58/R/foobar #>  #>   file: /foo.txt #>   size: 0 mb x$delete(\"foo.txt\") x$list() #> character(0)"},{"path":"https://docs.ropensci.org/hoardr/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Manage Cached Files","text":"Please report issues bugs. License: MIT Get citation information hoardr R citation(package = 'hoardr') Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/hoardr/reference/hoard.html","id":null,"dir":"Reference","previous_headings":"","what":"hoardr class — hoard","title":"hoardr class — hoard","text":"hoardr class","code":""},{"path":"https://docs.ropensci.org/hoardr/reference/hoard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hoardr class — hoard","text":"path (character) path cache files . required type (character) type cache. One \"user_cache_dir\" (default), \"user_log_dir\", \"user_data_dir\", \"user_config_dir\", \"site_data_dir\", \"site_config_dir\". Can also pass function gives path directory, e.g., tempdir(). required.","code":""},{"path":"https://docs.ropensci.org/hoardr/reference/hoard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"hoardr class — hoard","text":"purposes caching, likely want stick user_cache_dir, can change type cache type parameter. hoard just tiny wrapper around HoardClient$new(), exported, can use want via ::: Methods cache_path_get() Get cache path return: (character) path cache directory cache_path_set(path = NULL, type = \"user_cache_dir\", prefix = \"R\", full_path = NULL) Set cache path. default, set cache path file.path(user_cache_dir, prefix, path). Note actually make directory, just sets path . path (character) path appended cache path set type type (character) type cache, see rappdirs prefix (character) prefix path value. Default: \"R\" full_path (character) instead using path, type, prefix just set full path parameter return: (character) path cache directory just set list() List files directory (full file paths) return: (character) vector file paths files cache mkdir() Make directory exist already return: TRUE, invisibly delete(files, force = TRUE) Delete files name files (character) vector/list file paths force (logical) force deletion? Default: TRUE return: nothing delete_all(force = TRUE) Delete files force (logical) force deletion? Default: FALSE return: nothing details(files = NULL) Get file details files (character) vector/list file paths return: objects class cache_info, brief summary info including file path file size keys(algo = \"md5\") Get hash files. Note keys may unique files identical, leading identical hashes return: (character) hashes files key(x, algo = \"md5\") Get hash single file. Note keys may unique files identical, leading identical hashes x (character) path file algo (character) algorithm used, passed digest::digest(), choices: md5 (default), sha1, crc32, sha256, sha512, xxhash32, xxhash64 murmur32. return: (character) hash file files() Get files HoardFile objects return: (character) paths files compress() Compress files zip file - leaving zip file return: (character) path cache directory uncompress() Uncompress files remove zip file return: (character) path cache directory exists(files) Check files exist files: (character) one files, paths optional return: (data.frame) two columns: files: (character) file path exists: (boolean) exist ","code":""},{"path":"https://docs.ropensci.org/hoardr/reference/hoard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hoardr class — hoard","text":"","code":"(x <- hoard()) #> <hoard>  #>   path:  #>   cache path:  x$cache_path_set(path = \"foobar\", type = 'tempdir') #> [1] \"/tmp/RtmpjbS6SN/R/foobar\" x #> <hoard>  #>   path: foobar #>   cache path: /tmp/RtmpjbS6SN/R/foobar x$path #> [1] \"foobar\" x$cache_path_get() #> [1] \"/tmp/RtmpjbS6SN/R/foobar\"  # Or you can set the full path directly with `full_path` mydir <- file.path(tempdir(), \"foobar\") x$cache_path_set(full_path = mydir) #> [1] \"/tmp/RtmpjbS6SN/foobar\" x #> <hoard>  #>   path: foobar #>   cache path: /tmp/RtmpjbS6SN/foobar x$path #> [1] \"foobar\" x$cache_path_get() #> [1] \"/tmp/RtmpjbS6SN/foobar\"  # make the directory if doesn't exist already x$mkdir()  # list files in dir x$list() #> character(0) cat(1:10000L, file = file.path(x$cache_path_get(), \"foo.txt\")) x$list() #> [1] \"/tmp/RtmpjbS6SN/foobar/foo.txt\"  # add more files cat(letters, file = file.path(x$cache_path_get(), \"foo2.txt\")) cat(LETTERS, file = file.path(x$cache_path_get(), \"foo3.txt\"))  # see if files exist x$exists(\"foo.txt\") # exists #>                            files exists #> 1 /tmp/RtmpjbS6SN/foobar/foo.txt   TRUE x$exists(c(\"foo.txt\", \"foo3.txt\")) # both exist #>                             files exists #> 1  /tmp/RtmpjbS6SN/foobar/foo.txt   TRUE #> 2 /tmp/RtmpjbS6SN/foobar/foo3.txt   TRUE x$exists(c(\"foo.txt\", \"foo3.txt\", \"stuff.txt\")) # one doesn't exist #>                              files exists #> 1   /tmp/RtmpjbS6SN/foobar/foo.txt   TRUE #> 2  /tmp/RtmpjbS6SN/foobar/foo3.txt   TRUE #> 3 /tmp/RtmpjbS6SN/foobar/stuff.txt  FALSE  # cache details x$details() #> <cached files> #>   directory: /tmp/RtmpjbS6SN/foobar #>  #>   file: /foo.txt #>   size: 0.049 mb #>  #>   file: /foo2.txt #>   size: 0 mb #>  #>   file: /foo3.txt #>   size: 0 mb #>   # delete files by name - we prepend the base path for you x$delete(\"foo.txt\") x$list() #> [1] \"/tmp/RtmpjbS6SN/foobar/foo2.txt\" \"/tmp/RtmpjbS6SN/foobar/foo3.txt\" x$details() #> <cached files> #>   directory: /tmp/RtmpjbS6SN/foobar #>  #>   file: /foo2.txt #>   size: 0 mb #>  #>   file: /foo3.txt #>   size: 0 mb #>   # delete all files cat(\"one\\ntwo\\nthree\", file = file.path(x$cache_path_get(), \"foo.txt\")) cat(\"asdfasdf asd fasdf\", file = file.path(x$cache_path_get(), \"bar.txt\")) x$delete_all() x$list() #> character(0)  # make/get a key for a file cat(1:10000L, file = file.path(x$cache_path_get(), \"foo.txt\")) x$keys() #> [1] \"fe28308b4b9c4b40998cf4d5927a15ed\" x$key(x$list()[1]) #> [1] \"fe28308b4b9c4b40998cf4d5927a15ed\"  # as files Map(function(z) z$exists(), x$files()) #> [[1]] #> [1] TRUE #>   # compress and uncompress x$compress() #> compressed! x$uncompress() #> uncompressed!  # reset cache path x$cache_path_set(path = \"stuffthings\", type = \"tempdir\") #> [1] \"/tmp/RtmpjbS6SN/R/stuffthings\" x #> <hoard>  #>   path: stuffthings #>   cache path: /tmp/RtmpjbS6SN/R/stuffthings x$cache_path_get() #> [1] \"/tmp/RtmpjbS6SN/R/stuffthings\" x$list() #> character(0)  # cleanup unlink(x$cache_path_get())"},{"path":"https://docs.ropensci.org/hoardr/reference/hoardr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hoardr — hoardr-package","title":"hoardr — hoardr-package","text":"Manage Cached Files","code":""},{"path":"https://docs.ropensci.org/hoardr/reference/hoardr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"hoardr — hoardr-package","text":"hoardr tiny package just single export hoard(). package goal make easy setup, use, manage cached files another R package. addition, can export functions package using hoardr users manage cached files.","code":""},{"path":"https://docs.ropensci.org/hoardr/reference/hoardr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hoardr — hoardr-package","text":"Scott Chamberlain myrmecocystus@gmail.com","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"hoardr-054","dir":"Changelog","previous_headings":"","what":"hoardr 0.5.4","title":"hoardr 0.5.4","text":"CRAN release: 2024-01-23","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"bug-fixes-0-5-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"hoardr 0.5.4","text":"testthat::test_check() failed full path cache dir tempdir(). Replaced tempdir() full path works (#23).","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"hoardr-053","dir":"Changelog","previous_headings":"","what":"hoardr 0.5.3","title":"hoardr 0.5.3","text":"CRAN release: 2023-01-26 New maintainer (#17).","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"hoardr-052","dir":"Changelog","previous_headings":"","what":"hoardr 0.5.2","title":"hoardr 0.5.2","text":"CRAN release: 2018-12-01","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"bug-fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"hoardr 0.5.2","text":"Important fix: HoardClient, called hoardr() function, storing cache path environment inside R6 class. multiple instances HoardClient exist R session, cache path one affects others. Fixed storing private variable int R6 class instead environment (#14).","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"hoardr-050","dir":"Changelog","previous_headings":"","what":"hoardr 0.5.0","title":"hoardr 0.5.0","text":"CRAN release: 2018-10-13","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"hoardr 0.5.0","text":"Gains new method HoardClient object check one files exist, returning data.frame (#10). cache_path_set() method HoardClient gains new parameter full_path make base cache path directly full path rather using three parameters (path, type, prefix) (#12).","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"hoardr-020","dir":"Changelog","previous_headings":"","what":"hoardr 0.2.0","title":"hoardr 0.2.0","text":"CRAN release: 2017-05-10","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"changes-0-2-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"hoardr 0.2.0","text":"Compliance CRAN policies writing users disk (#6).","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"hoardr 0.2.0","text":"Improved documentation (#7).","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"hoardr 0.2.0","text":"Change key() keys() use file=TRUE (#8). Fix R6 import warning (#5).","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"hoardr-010","dir":"Changelog","previous_headings":"","what":"hoardr 0.1.0","title":"hoardr 0.1.0","text":"CRAN release: 2017-04-21","code":""},{"path":"https://docs.ropensci.org/hoardr/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"hoardr 0.1.0","text":"released CRAN","code":""}]
